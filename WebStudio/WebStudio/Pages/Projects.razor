@page "/projects"
@inject ProjectsService _handler

<Modal @ref=_editModal>
    <ModalContent Centered>
        <ModalTitle Margin=Margin.Is3>Проект</ModalTitle>
        <ModalBody>
            <Field>
                <FieldLabel>
                    Название
                </FieldLabel>
                <FieldBody>
                    <TextEdit Placeholder="Название" @bind-Text="_editable.Title" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>
                    Описание
                </FieldLabel>
                <FieldBody>
                    <TextEdit Placeholder="Описание" @bind-Text="_editable.Description" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>
                    Дата начала
                </FieldLabel>
                <FieldBody>
                    <DatePicker Placeholder="Дата начала" TValue=DateTime @bind-Date="_editable.StartDate" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>
                    Дата окончания
                </FieldLabel>
                <FieldBody>
                    <DatePicker Placeholder="Дата окончания" TValue=DateTime @bind-Date="_editable.EndDate" />
                </FieldBody>
            </Field>
            <Field>
                <FieldLabel>
                    Стоимость
                </FieldLabel>
                <FieldBody>
                    <TextEdit Placeholder="Стоимость" @bind-Text="_editable.PriceString" MaskType=MaskType.Numeric/>
                </FieldBody>
            </Field>
            <Field Horizontal Margin=Margin.Is2.OnX>
                <FieldLabel>
                    Закончен &nbsp;
                </FieldLabel>
                <FieldBody>
                    <Check TValue=bool @bind-Checked="_editable.IsCompleted" Size=Size.Large />
                </FieldBody>
            </Field>
        </ModalBody>
        <ModalFooter>
            <Button Clicked=CloseEditModal Color=Color.Success>Сохранить</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

<Button Clicked="AddProject" Margin=Margin.Is3 Block Color=Color.Success>Добавить проект</Button>

@if (_projects != null)
{
    @if (_projects.Any())
    {
        @foreach (var project in _projects)
        {
            <Card>
                <CardHeader>
                    @project.Title
                </CardHeader>
                <CardBody>@project.Description</CardBody>
                <CardSubtitle Margin=Margin.Is2 Flex=Flex.JustifyContent.Between>
                    <Text>@project.StartDate.ToShortDateString() - @project.EndDate.ToShortDateString()</Text>
                    <Text>@(project.IsCompleted ? "Выполнено!" : "Не выполнено!")</Text>
                    <Text Color=TextColor.Success>@(project.Price)$</Text>
                </CardSubtitle>
                <CardFooter>
                    <Button Color=Color.Warning Clicked="()=>OpenEditModal(project)">
                        <Icon Name=IconName.Edit />
                    </Button>
                    <Button Color=Color.Danger Clicked="()=>DeleteProject(project)">
                        <Icon Name=IconName.Delete />
                    </Button>
                </CardFooter>
            </Card>
        }

    }
    else
    {
        <Alert Color=Color.Warning>Список проектов пуст!</Alert>
    }
}
else
{
    <Alert Color=Color.Info>Загрузка...</Alert>
}

@code
{
    private Modal _editModal;
    private List<Project> _projects;
    private Project _editable = new Project();

    protected override void OnInitialized()
    {
        LoadAll();
    }

    private void LoadAll()
    {
        _projects = _handler.GetAll();
    }

    public void AddProject()
    {
        _handler.Insert(new Project
            {
                Title = "Новый проект",
                Description = "Описание",
                StartDate = DateTime.Now,
                EndDate = DateTime.Now.AddYears(2),
                Price = 0,
                IsCompleted = false
            });
        LoadAll();
    }

    public void DeleteProject(Project project)
    {
        _handler.Delete(project.Id);
        LoadAll();
    }

    public void OpenEditModal(Project project)
    {
        _editable = project;
        _editModal.Show();
    }

    public void CloseEditModal()
    {
        InvokeAsync(() => _editModal.Close(CloseReason.UserClosing));
        SaveChanges();
    }

    public void SaveChanges()
    {
        _handler.Update(_editable);
        LoadAll();
    }
}